{
 "type":"object",
 "properties":{
   "datasource":{
     "type":"object",
     "properties":{
       "callbacks":{
         "type":"array" ,
         "items":{
           "type":"object",
           "properties":{
             "address":{
               "type":"string",
               "description":"For MSG callbacks, the mailbox address to use"
             },
             "delay":{
               "type":"integer",
               "description":"Seed for an initial random delay before first call, in millisecs.  The actual delay is this value plus a random number in [0, 1000)"
             },
             "fire_once":{
               "type":"boolean",
               "description":"A flag specifying whether callbacks should be called at most once, even if the job is requeued and retraces previous states"
             },
             "method":{
               "type":"string" ,
               "enum":[
                 "DELETE", "delete", "put", "msg", "post", "MSG", "POST", "GET", "get", "PUT"
               ],
               "default": "GET",
               "description":"The HTTP method to use"
             },
             "order":{
               "anyOf":[
                 {
                   "type":"null"
                 },
                 {
                   "type":"integer",
                   "minimum":0
                 }
               ],
               "description":"Trigger ordering.  Smaller (or nil) orders are triggered first, with progress callbacks taking preference over state callbacks.  Synchronous and asynchronous callbacks are ordered independently.  Callbacks with the same order, states and synchronicity are triggered in the order they are received."
             },
             "payload":{
               "type":"object",
               "description":"The payload to be used as a message body"
             },
             "progress_variation":{
               "type":"number",
               "exclusiveMinimum":0,
               "exclusiveMaximum":1,
               "description":"A number in (0, 1) which gives the variation in progress that will trigger this callback."
             },
             "register-address":{
               "type":"boolean",
               "description":"For MSG callbacks, whether to register the requested address if it does not yet exist (i.e., whether to create the associated message queue when the mailbox is RabbitMQ)"
             },
             "retries":{
               "type":"integer",
               "description":"Number of times the callback is retried on failures"
             },
             "retry_delay":{
               "type":"integer",
               "default": 1000,
               "description":"Seed for a exponential back-off between retries, in millisecs"
             },
             "states":{
               "type":"array" ,
               "items":{
                 "type":"string"
               },
               "description":"A list of states for which the callback should be called. If not given, the callback will be called for either the given progress variation or, if that's not provided, for all state changes"
             },
             "synchronous":{
               "type":"boolean",
               "description":"A flag specifying wether the callback is synchronous and we need to wait for a remote response before proceeding"
             },
             "timeout":{
               "type":"integer",
               "default": 30000,
               "description":"Lapse in millisecs waiting for the callback to get a response"
             },
             "url":{
               "type":"string",
               "description":"The URL to invoke with the method above"
             }
           },
           "required":[
             "url"
           ]
         }
       },
       "charset":{
         "type":"string",
         "default": "UTF-8",
         "description":"The character set used in the source"
       },
       "data":{
         "type":"string",
         "description":"Data for inline sources"
       },
       "disable_datetime":{
         "type":"boolean",
         "description":"Whether automatic generation of datetime children fields should be disabled"
       },
       "encoding":{
         "type":"string",
         "default": "plain",
         "description":"Data encoding: plain, zip, ..."
       },
       "fields":{
         "type":"object",
         "additionalProperties":{
           "type":"object",
           "properties":{
             "auto_generated":{
               "type":"boolean",
               "description":"True if the field was generated from another field"
             },
             "child_ids":{
               "type":"array" ,
               "items":{
                 "type":"string"
               },
               "description":"IDs of the children if this generates other fields"
             },
             "column_number":{
               "type":"integer",
               "minimum":0,
               "description":"Column from the data source"
             },
             "datatype":{
               "type":"string",
               "description":"The storage type of the field"
             },
             "description":{
               "type":"string",
               "description":"Free text description of the field"
             },
             "label":{
               "type":"string",
               "description":"A label for the field (free text for use by clients)"
             },
             "locale":{
               "type":"string",
               "description":"Overrides global locale"
             },
             "missing_tokens":{
               "type":"array" ,
               "items":{
                 "type":"string"
               },
               "description":"Overrides global missing tokens"
             },
             "name":{
               "type":"string",
               "description":"Name for the field"
             },
             "parent_ids":{
               "type":"array" ,
               "items":{
                 "type":"string"
               },
               "description":"IDs of the parents if this is a generated field"
             },
             "preferred":{
               "anyOf":[
                 {
                   "type":"null"
                 },
                 {
                   "type":"boolean"
                 }
               ],
               "default": true,
               "description":"Whether the field is used by default for model creation"
             },
             "provenance":{
               "type":"string" ,
               "enum":[
                 "forecast", "confidence", "flatline", "probability", "query", "forecast_timestamp", "vote_count", "vote", "forecast_upper_bound", "datetime", "prediction", "anomaly_score", "projection", "forecast_trend", "topic_distribution", "forecast_level", "forecast_seasonality", "forecast_lower_bound", "centroid", "batch_input", "importance", "node"
               ],
               "description":"Field value origin (when the value is generated)"
             }
           }
         },
         "description":"List of inferred columns in this datasource"
       },
       "fields_preview":{
         "type":"object",
         "description":"Fields peeked as a map from field id to columns"
       },
       "format":{
         "type":"string" ,
         "enum":[
           "json", "csv", "json_rows", "excel", "arff"
         ],
         "description":"Data format"
       },
       "generation_parameters":{
         "type":"object",
         "properties":{
           "cat_padding":{
             "type":"integer",
             "minimum":0,
             "default": 0,
             "description":"Number of padding characters to prepend to category names (for testing long strings)"
           },
           "fields":{
             "type":"integer",
             "minimum":1,
             "description":"Number of fields to include in synthetic datasource"
           },
           "frac_cat":{
             "type":"number",
             "minimum":0,
             "maximum":1,
             "default": 0.5,
             "description":"Fraction of attributes that are categorical"
           },
           "frac_time":{
             "type":"number",
             "minimum":0,
             "maximum":1,
             "default": 0.0,
             "description":"Fraction of attributes that represent times"
           },
           "missing":{
             "type":"number",
             "minimum":0,
             "maximum":1,
             "default": 0.0,
             "description":"Fraction of missing (nil) values that occur in the data"
           },
           "noise":{
             "type":"number",
             "minimum":0,
             "maximum":1,
             "default": 0.0,
             "description":"Fraction of attributes not correlated with the class attribute"
           },
           "num_cats":{
             "type":"integer",
             "default": 3,
             "description":"Number of categories for categorical attributes."
           },
           "num_classes":{
             "type":"integer",
             "default": 3,
             "description":"Number of classes for the final 'class' attribute"
           },
           "rows":{
             "type":"integer",
             "minimum":1,
             "description":"Number of rows to include in synthetic datasource"
           },
           "sparsity":{
             "type":"number",
             "minimum":0,
             "maximum":1,
             "default": 0.0,
             "description":"Fraction of rows that will have a value of zero for each numeric field"
           }
         },
         "required":[
           "fields", "rows"
         ],
         "additionalProperties": false,
         "description":"Parameters for controlling the creation of generated data for use with kind 'synthetic'"
       },
       "head":{
         "type":"string",
         "description":"First blocks of decoded data"
       },
       "head_bytes":{
         "type":"integer",
         "minimum":0,
         "description":"Size of the peeked head"
       },
       "head_rows":{
         "type":"integer",
         "minimum":0,
         "description":"Number of rows in peeked head"
       },
       "header":{
         "anyOf":[
           {
             "type":"null"
           },
           {
             "type":"boolean"
           }
         ],
         "description":"Result of the header autodetection"
       },
       "item_analysis":{
         "type":"object",
         "properties":{
           "limit":{
             "type":"number",
             "minimum":1,
             "default": 10000,
             "description":"Maximum number of items considered."
           },
           "pruning_strategy":{
             "type":"string" ,
             "enum":[
               "nearest_to_frequency", "most_frequent"
             ],
             "default": "nearest_to_frequency",
             "description":"Strategy used to select items when item_limit is surpassed"
           },
           "separator":{
             "anyOf":[
               {
                 "type":"null"
               },
               {
                 "type":"string"
               }
             ],
             "description":"Character delimiting items in the field. Set to null to autodetect if there is no regular expression."
           },
           "separator_regexp":{
             "anyOf":[
               {
                 "type":"null"
               },
               {
                 "type":"string"
               }
             ],
             "description":"Regular expression delimiting items in the field. Overrides item_separator."
           },
           "target_frequency":{
             "type":"number",
             "minimum":0,
             "maximum":1,
             "default": 0.3333333333333333,
             "description":"A ratio in (0, 1] with the occurence rate used when the prunning_strategy is nearest_to_frequency"
           }
         },
         "description":"Default values for items fields parameters"
       },
       "json_key":{
         "type":"string",
         "description":"Key where rows are to be found in JSON top-level maps"
       },
       "kind":{
         "type":"string" ,
         "enum":[
           "internal", "inline", "synthetic", "clone", "file", "external"
         ],
         "description":"The kind of this message's body"
       },
       "locale":{
         "type":"string",
         "description":"Default locale for field values"
       },
       "rogue_rows":{
         "type":"object",
         "description":"Rows peeked that had an incorrect number of fields"
       },
       "separator":{
         "anyOf":[
           {
             "type":"null"
           },
           {
             "type":"string"
           }
         ],
         "description":"Result of the separator autodetection"
       },
       "size":{
         "type":"integer",
         "minimum":0,
         "description":"Size, in bytes, of the incoming data"
       },
       "term_analysis":{
         "type":"object",
         "properties":{
           "bigrams":{
             "type":"boolean",
             "description":"Allow terms to be bigrams"
           },
           "case_sensitive":{
             "anyOf":[
               {
                 "type":"null"
               },
               {
                 "type":"boolean"
               }
             ],
             "description":"Defines whether the term analysis is case sensitive"
           },
           "enabled":{
             "type":"boolean",
             "description":"Enable/disables term analysis for this field.  Has no effect except for dataset creation."
           },
           "excluded_terms":{
             "anyOf":[
               {
                 "type":"null"
               },
               {
                 "type":"array" ,
                 "items":{
                   "type":"string"
                 }
               }
             ],
             "description":"A list of terms to ignore when performing term analysis"
           },
           "language":{
             "anyOf":[
               {
                 "type":"null"
               },
               {
                 "type":"string" ,
                 "enum":[
                   "nl", "pt", "en", "none", "zh", "ro", "tr", "it", "fa", "pl", "fi", "ca", "sv", "fr", "da", "hu", "de", "ru", "es", "ja", "cs", "ar", "ko"
                 ]
               }
             ],
             "default": "none",
             "description":"Language code for detected language, or 'none' for no detection, or nil to let us detect it."
           },
           "ngrams":{
             "type":"integer",
             "minimum":1,
             "description":"The maximum length of consecutive tokens to consider as terms"
           },
           "stem_words":{
             "anyOf":[
               {
                 "type":"null"
               },
               {
                 "type":"boolean"
               }
             ],
             "description":"Defines whether the term analysis stems words"
           },
           "stopword_diligence":{
             "anyOf":[
               {
                 "type":"null"
               },
               {
                 "type":"string" ,
                 "enum":[
                   "light", "aggressive", "normal"
                 ]
               }
             ],
             "description":"Defines whether the term analysis uses stop words"
           },
           "stopword_removal":{
             "type":"string" ,
             "enum":[
               "none", "all_languages", "selected_language"
             ],
             "description":"Remove words that are stopwords in any language."
           },
           "term_filters":{
             "anyOf":[
               {
                 "type":"null"
               },
               {
                 "type":"array" ,
                 "items":{
                   "type":"string" ,
                   "enum":[
                     "numeric_digits", "non_dictionary", "non_language_characters", "single_tokens", "html_keywords"
                   ]
                 }
               }
             ],
             "description":"A list of filters to apply when choosing the termset"
           },
           "term_regexps":{
             "anyOf":[
               {
                 "type":"null"
               },
               {
                 "type":"array" ,
                 "items":{
                   "type":"string"
                 }
               }
             ],
             "description":"A list of regular expressions to consider as terms"
           },
           "token_mode":{
             "type":"string" ,
             "enum":[
               "full_terms_only", "tokens_only", "all"
             ],
             "default": "all",
             "description":"Defines whether the term analysis uses full terms, tokenized terms, or both"
           },
           "use_stopwords":{
             "anyOf":[
               {
                 "type":"null"
               },
               {
                 "type":"boolean"
               }
             ],
             "description":"Defines whether the term analysis uses stop words"
           }
         },
         "description":"Default values for term analysis parameters"
       },
       "uri":{
         "type":"string",
         "description":"A URI defining how to access the data"
       }
     },
     "required":[
       "kind"
     ]
   }
 },
 "required":[
   "datasource"
 ],
 "additionalProperties": false
}