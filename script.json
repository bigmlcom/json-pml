{
 "type":"object",
 "properties":{
   "script":{
     "type":"object",
     "properties":{
       "callbacks":{
         "type":"array" ,
         "items":{
           "type":"object",
           "properties":{
             "address":{
               "type":"string",
               "description":"For MSG callbacks, the mailbox address to use"
             },
             "delay":{
               "type":"integer",
               "description":"Seed for an initial random delay before first call, in millisecs.  The actual delay is this value plus a random number in [0, 1000)"
             },
             "fire_once":{
               "type":"boolean",
               "description":"A flag specifying whether callbacks should be called at most once, even if the job is requeued and retraces previous states"
             },
             "method":{
               "type":"string" ,
               "enum":[
                 "DELETE", "delete", "put", "msg", "post", "MSG", "POST", "GET", "get", "PUT"
               ],
               "default": "GET",
               "description":"The HTTP method to use"
             },
             "order":{
               "anyOf":[
                 {
                   "type":"null"
                 },
                 {
                   "type":"integer",
                   "minimum":0
                 }
               ],
               "description":"Trigger ordering.  Smaller (or nil) orders are triggered first, with progress callbacks taking preference over state callbacks.  Synchronous and asynchronous callbacks are ordered independently.  Callbacks with the same order, states and synchronicity are triggered in the order they are received."
             },
             "payload":{
               "type":"object",
               "description":"The payload to be used as a message body"
             },
             "progress_variation":{
               "type":"number",
               "exclusiveMinimum":0,
               "exclusiveMaximum":1,
               "description":"A number in (0, 1) which gives the variation in progress that will trigger this callback."
             },
             "register-address":{
               "type":"boolean",
               "description":"For MSG callbacks, whether to register the requested address if it does not yet exist (i.e., whether to create the associated message queue when the mailbox is RabbitMQ)"
             },
             "retries":{
               "type":"integer",
               "description":"Number of times the callback is retried on failures"
             },
             "retry_delay":{
               "type":"integer",
               "default": 1000,
               "description":"Seed for a exponential back-off between retries, in millisecs"
             },
             "states":{
               "type":"array" ,
               "items":{
                 "type":"string"
               },
               "description":"A list of states for which the callback should be called. If not given, the callback will be called for either the given progress variation or, if that's not provided, for all state changes"
             },
             "synchronous":{
               "type":"boolean",
               "description":"A flag specifying wether the callback is synchronous and we need to wait for a remote response before proceeding"
             },
             "timeout":{
               "type":"integer",
               "default": 30000,
               "description":"Lapse in millisecs waiting for the callback to get a response"
             },
             "url":{
               "type":"string",
               "description":"The URL to invoke with the method above"
             }
           },
           "required":[
             "url"
           ]
         }
       },
       "imports":{
         "type":"array" ,
         "items":{
           "type":"string"
         },
         "description":"List of the identifiers of libraries imported by this script."
       },
       "inputs":{
         "type":"array" ,
         "items":{
           "type":"object",
           "properties":{
             "default":{
               "type":"any",
               "description":"Default value for the input during execution. Must match its type."
             },
             "name":{
               "type":"string",
               "description":"The input's name"
             },
             "type":{
               "anyOf":[
                 {
                   "type":"string" ,
                   "enum":[
                     "list-of-map", "boolean", "map", "batchcentroid-id", "numeric", "list", "string", "batchprediction-id", "model-id", "list-of-integer", "resource-id", "list-of-string", "centroid-id", "project-id", "sample-id", "script-id", "source-id", "library-id", "list-of-boolean", "list-of-number", "items", "logisticregression-id", "text", "number", "evaluation-id", "statisticaltest-id", "batchanomalyscore-id", "cluster-id", "function", "integer", "topicdistribution-id", "execution-id", "dataset-id", "configuration-id", "prediction-id", "anomaly-id", "anomalyscore-id", "categorical", "ensemble-id", "batchtopicdistribution-id", "correlation-id", "associationset-id", "association-id", "supervised-model-id", "topicmodel-id"
                   ]
                 },
                 {
                   "type":"array" ,
                   "items":{
                     "type":"any"
                   }
                 }
               ],
               "description":"The input's data type"
             }
           },
           "required":[
             "name", "type"
           ]
         },
         "description":"A list of inputs, with names, types and defaults."
       },
       "name":{
         "type":"string",
         "description":"The script's name, set by the user."
       },
       "origin_id":{
         "anyOf":[
           {
             "type":"string"
           },
           {
             "type":"array" ,
             "items":{
               "type":"string"
             }
           }
         ],
         "description":"The identifier of the script to be cloned, if any."
       },
       "outputs":{
         "type":"array" ,
         "items":{
           "type":"object",
           "properties":{
             "name":{
               "type":"string",
               "description":"The output variable's name"
             }
           },
           "required":[
             "name"
           ]
         },
         "description":"List of output values, named by variable names defined in the script"
       },
       "source_code":{
         "type":"string"
       }
     }
   }
 },
 "required":[
   "script"
 ],
 "additionalProperties": false
}