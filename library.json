{
 "type":"object",
 "properties":{
   "library":{
     "type":"object",
     "properties":{
       "callbacks":{
         "type":"array" ,
         "items":{
           "type":"object",
           "properties":{
             "address":{
               "type":"string",
               "description":"For MSG callbacks, the mailbox address to use"
             },
             "delay":{
               "type":"integer",
               "description":"Seed for an initial random delay before first call, in millisecs.  The actual delay is this value plus a random number in [0, 1000)"
             },
             "fire_once":{
               "type":"boolean",
               "description":"A flag specifying whether callbacks should be called at most once, even if the job is requeued and retraces previous states"
             },
             "method":{
               "type":"string" ,
               "enum":[
                 "DELETE", "delete", "put", "msg", "post", "MSG", "POST", "GET", "get", "PUT"
               ],
               "default": "GET",
               "description":"The HTTP method to use"
             },
             "payload":{
               "type":"object",
               "description":"The payload to be used as a message body"
             },
             "retries":{
               "type":"integer",
               "description":"Number of times the callback is retried on failures"
             },
             "retry_delay":{
               "type":"integer",
               "default": 1000,
               "description":"Seed for a exponential back-off between retries, in millisecs"
             },
             "states":{
               "type":"array" ,
               "items":{
                 "type":"string"
               },
               "description":"A list of states for which the callback should be called. If not given, the callback will be called for all state changes"
             },
             "synchronous":{
               "type":"boolean",
               "description":"A flag specifying wether the callback is synchronous and we need to wait for a remote response before proceeding"
             },
             "timeout":{
               "type":"integer",
               "default": 30000,
               "description":"Lapse in millisecs waiting for the callback to get a response"
             },
             "url":{
               "type":"string",
               "description":"The URL to invoke with the method above"
             }
           },
           "required":[
             "url"
           ]
         }
       },
       "exports":{
         "type":"array" ,
         "items":{
           "type":"object",
           "properties":{
             "name":{
               "type":"string",
               "description":"The exported name."
             },
             "signature":{
               "type":"array" ,
               "items":{
                 "type":"string"
               },
               "description":"List of the exported procedure parameters."
             }
           },
           "required":[
             "name"
           ],
           "additionalProperties": false
         },
         "description":"A list of exported names, with signatures."
       },
       "imports":{
         "type":"array" ,
         "items":{
           "type":"string"
         },
         "description":"List of the identifiers of libraries imported by this one."
       },
       "origin_id":{
         "anyOf":[
           {
             "type":"string"
           },
           {
             "type":"array" ,
             "items":{
               "type":"string"
             }
           }
         ],
         "description":"The identifier of the library to be cloned, if any."
       },
       "source_code":{
         "anyOf":[
           {
             "type":"null"
           },
           {
             "type":"string"
           }
         ]
       }
     }
   }
 },
 "required":[
   "library"
 ],
 "additionalProperties": false
}